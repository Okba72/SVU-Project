#!/bin/bash
#
SSLHOME=../config/ssl

openssl genrsa -out ${SSLHOME}/key.pem 4096
openssl req -new -key ${SSLHOME}/key.pem -out ${SSLHOME}/csr.pem
openssl x509 -req -days 9999 -in ${SSLHOME}/csr.pem -signkey ${SSLHOME}/key.pem -out ${SSLHOME}/cert.pem
rm ${SSLHOME}/csr.pem

########################################################################
########################################################################
########################################################################
########################################################################

SVU_DOMAIN_NAME=localhost # Use your own domain name

# Generate a private key
openssl genrsa -out ${SSLHOME}/$SVU_DOMAIN_NAME.key 4096

# Create a certificate-signing request
openssl req -new -key ${SSLHOME}/$SVU_DOMAIN_NAME.key -out ${SSLHOME}/$SVU_DOMAIN_NAME.csr

# Create a config file for the extensions
>${SSLHOME}/$SVU_DOMAIN_NAME.ext cat <<-EOF
authorityKeyIdentifier=keyid,issuer
basicConstraints=CA:FALSE
keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
subjectAltName = @alt_names
[alt_names]
DNS.1 = $SVU_DOMAIN_NAME # Be sure to include the domain name here because Common Name is not so commonly honoured by itself
DNS.2 = bar.$SVU_DOMAIN_NAME # Optionally, add additional domains (I've added a subdomain here)
IP.1 = 192.168.0.13 # Optionally, add an IP address (if the connection which you have planned requires it)
EOF
# Create the signed certificate
openssl x509 -req -in ${SSLHOME}/$SVU_DOMAIN_NAME.csr -CA svu_root_ca.pem -CAkey myCA.key -CAcreateserial \
-out ${SSLHOME}/$SVU_DOMAIN_NAME.crt -days 825 -sha256 -extfile ${SSLHOME}/$SVU_DOMAIN_NAME.ext